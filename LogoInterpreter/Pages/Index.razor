@page "/"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<MudGrid Spacing="2" Style="height: 100%; margin: 0;">
    <!-- Left Panel - Tools -->
    <MudItem xs="12" md="4" lg="3">
        <MudPaper Elevation="2" Style="height: 100%; overflow: hidden;">
            <MudTabs Elevation="0" Rounded="true" PanelClass="pa-4" Style="height: 100%;">
                <MudTabPanel Text="Examples" Icon="@Icons.Material.Filled.Code">
                    <MudStack Spacing="2">
                        @foreach (var example in logoExamples)
                        {
                            <MudCard Style="cursor: pointer;" @onclick="@(() => LoadExample(example.Code))">
                                <MudCardContent Class="pa-3">
                                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                        <MudText Typo="Typo.subtitle2" Color="Color.Primary">@example.Title</MudText>
                                        <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Size="Size.Small" />
                                    </MudStack>
                                    <MudText Typo="Typo.caption" Class="mt-2" Style="font-family: 'Courier New', monospace; background: #f5f5f5; padding: 8px; border-radius: 4px;">
                                        @example.Code
                                    </MudText>
                                </MudCardContent>
                            </MudCard>
                        }
                    </MudStack>
                </MudTabPanel>
                
                <MudTabPanel Text="Reference" Icon="@Icons.Material.Filled.Help">
                    <MudStack Spacing="3">
                        <MudExpansionPanels Elevation="0">
                            <MudExpansionPanel Text="Movement Commands">
                                <div style="padding: 16px;">
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.body2"><strong>fd/forward [distance]</strong> - Move forward</MudText>
                                        <MudText Typo="Typo.body2"><strong>bk/backward [distance]</strong> - Move backward</MudText>
                                        <MudText Typo="Typo.body2"><strong>rt/right [angle]</strong> - Turn right</MudText>
                                        <MudText Typo="Typo.body2"><strong>lt/left [angle]</strong> - Turn left</MudText>
                                    </MudStack>
                                </div>
                            </MudExpansionPanel>
                            
                            <MudExpansionPanel Text="Pen Control">
                                <div style="padding: 16px;">
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.body2"><strong>pu/penup</strong> - Lift pen</MudText>
                                        <MudText Typo="Typo.body2"><strong>pd/pendown</strong> - Lower pen</MudText>
                                        <MudText Typo="Typo.body2"><strong>setcolor [color]</strong> - Set pen color</MudText>
                                        <MudText Typo="Typo.body2"><strong>setpensize [size]</strong> - Set pen width</MudText>
                                    </MudStack>
                                </div>
                            </MudExpansionPanel>
                            
                            <MudExpansionPanel Text="Control Structures">
                                <div style="padding: 16px;">
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.body2"><strong>repeat [count] [commands]</strong> - Repeat commands</MudText>
                                        <MudText Typo="Typo.body2"><strong>if [condition] [commands]</strong> - Conditional execution</MudText>
                                        <MudText Typo="Typo.body2"><strong>home</strong> - Return to center</MudText>
                                        <MudText Typo="Typo.body2"><strong>clean</strong> - Clear canvas</MudText>
                                    </MudStack>
                                </div>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudStack>
                </MudTabPanel>
                
                <MudTabPanel Text="History" Icon="@Icons.Material.Filled.History">
                    <MudStack Spacing="2">
                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h6">Command History</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" 
                                          Size="Size.Small" 
                                          OnClick="ClearHistory" 
                                          Title="Clear History" />
                        </MudStack>
                        
                        @if (commandHistory.Any())
                        {
                            <MudStack Spacing="1">
                                @foreach (var command in commandHistory.TakeLast(20).Reverse())
                                {
                                    <MudChip T="string" Size="Size.Small" 
                                            Color="Color.Default" 
                                            Variant="Variant.Outlined"
                                            OnClick="@(() => LoadCommand(command))"
                                            Style="cursor: pointer; font-family: 'Courier New', monospace;">
                                        @command
                                    </MudChip>
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudAlert Severity="Severity.Info" Variant="Variant.Text">
                                Command history will appear here
                            </MudAlert>
                        }
                    </MudStack>
                </MudTabPanel>
                
                <MudTabPanel Text="Tools" Icon="@Icons.Material.Filled.Build">
                    <LogoToolbar OnCommandClick="HandleToolbarCommand" />
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
    </MudItem>

    <!-- Right Panel - Canvas and Editor -->
    <MudItem xs="12" md="8" lg="9">
        <MudStack Spacing="2" Style="height: 100%;">
            <!-- Canvas Section -->
            <MudPaper Elevation="2" Style="flex: 1; display: flex; flex-direction: column; min-height: 400px;">
                <MudToolBar Dense="true">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Brush" />
                        <MudText Typo="Typo.h6">Canvas</MudText>
                    </MudStack>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" 
                                  OnClick="ClearScreen" 
                                  Title="Clear Canvas"
                                  Size="Size.Small" />
                    <MudIconButton Icon="@Icons.Material.Filled.Download" 
                                  Title="Save Canvas"
                                  Size="Size.Small" />
                </MudToolBar>
                
                <div style="flex: 1; display: flex; align-items: center; justify-content: center; padding: 16px; background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);">
                    <canvas id="sandbox" 
                            width="800" 
                            height="600" 
                            style="border: 2px solid #ddd; border-radius: 8px; background: white; max-width: 100%; max-height: 100%;"></canvas>
                </div>
                
                <MudGrid AlignItems="Center" Class="pa-2">
                    <MudItem xs="6">
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.Pets" Color="Color.Primary" />
                            <MudText Typo="Typo.caption">Turtle Graphics</MudText>
                        </MudStack>
                    </MudItem>
                    <MudItem xs="6" Class="text-right">
                        <MudChip T="string" Size="Size.Small" Color="Color.Success" Variant="Variant.Text">
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Size="Size.Small" />
                            Ready
                        </MudChip>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <!-- Editor Section -->
            <MudPaper Elevation="2" Style="min-height: 200px;">
                <MudTabs Elevation="0" Rounded="false" PanelClass="pa-4">
                    <MudTabPanel Text="Command Line" Icon="@Icons.Material.Filled.Terminal">
                        <MudStack Spacing="3">
                            <MudTextField @bind-Value="currentInput"
                                        @ref="commandInputRef"
                                        @onkeydown="HandleKeyDown"
                                        Label="Logo Command"
                                        Variant="Variant.Outlined"
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.ChevronRight"
                                        AdornmentColor="Color.Primary"
                                        Placeholder="Enter Logo command (e.g., fd 50, rt 90)"
                                        HelperText="Press Enter to execute, Up arrow for history"
                                        Style="font-family: 'Courier New', monospace;" />
                            
                            <MudButton Variant="Variant.Filled" 
                                      Color="Color.Primary" 
                                      StartIcon="@Icons.Material.Filled.PlayArrow"
                                      OnClick="ExecuteCommand"
                                      FullWidth="true">
                                Execute Command
                            </MudButton>
                        </MudStack>
                    </MudTabPanel>
                    
                    <MudTabPanel Text="Multi-Line Editor" Icon="@Icons.Material.Filled.Code">
                        <MudStack Spacing="3">
                            <MudTextField @bind-Value="multiLineInput"
                                        Lines="8"
                                        Label="Logo Program"
                                        Variant="Variant.Outlined"
                                        Placeholder="Enter multiple Logo commands..."
                                        HelperText="Write multiple commands, procedures, and complex programs"
                                        Style="font-family: 'Courier New', monospace;" />
                            
                            <MudButton Variant="Variant.Filled" 
                                      Color="Color.Primary" 
                                      StartIcon="@Icons.Material.Filled.PlayArrow"
                                      OnClick="ExecuteMultiLineCommand"
                                      FullWidth="true">
                                Run Program
                            </MudButton>
                        </MudStack>
                    </MudTabPanel>
                </MudTabs>
            </MudPaper>

            <!-- Output Section -->
            <MudPaper Elevation="2" Style="min-height: 150px; max-height: 200px;">
                <MudToolBar Dense="true">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Terminal" />
                        <MudText Typo="Typo.h6">Output</MudText>
                    </MudStack>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" 
                                  OnClick="ClearOutput" 
                                  Title="Clear Output"
                                  Size="Size.Small" />
                </MudToolBar>
                
                <div style="height: calc(100% - 48px); overflow-y: auto; padding: 16px; font-family: 'Courier New', monospace; font-size: 0.875rem;">
                    @if (outputLines.Any())
                    {
                        @foreach (var line in outputLines.TakeLast(50))
                        {
                            <MudAlert Severity="@(line.IsError ? Severity.Error : Severity.Success)" 
                                     Variant="Variant.Text" 
                                     Dense="true" 
                                     Class="mb-1">
                                @line.Text
                            </MudAlert>
                        }
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info" Variant="Variant.Text">
                            Command output will appear here
                        </MudAlert>
                    }
                </div>
            </MudPaper>
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    private MudTextField<string> commandInputRef = null!;
    private string currentInput = "";
    private string multiLineInput = "";
    private List<OutputLine> outputLines = new();
    private List<string> commandHistory = new();
    private IJSObjectReference? logoModule;

    private class OutputLine
    {
        public string Text { get; set; } = "";
        public bool IsError { get; set; } = false;
    }

    private class LogoExample
    {
        public string Title { get; set; } = "";
        public string Code { get; set; } = "";
    }

    private List<LogoExample> logoExamples = new()
    {
        new() { Title = "Simple Square", Code = "repeat 4 [ fd 100 rt 90 ]" },
        new() { Title = "Colorful Star", Code = "setcolor red\nrepeat 5 [ fd 100 rt 144 ]" },
        new() { Title = "Spiral Pattern", Code = "repeat 100 [ fd repcount rt 91 ]" },
        new() { Title = "Flower Design", Code = "setcolor blue\nrepeat 36 [ fd 50 rt 170 ]" },
        new() { Title = "Perfect Circle", Code = "repeat 360 [ fd 1 rt 1 ]" },
        new() { Title = "Rainbow Square", Code = "repeat 4 [ setcolor random 10 fd 100 rt 90 ]" },
        new() { Title = "Nested Triangles", Code = "repeat 3 [ repeat 3 [ fd 50 rt 120 ] rt 120 ]" },
        new() { Title = "Sine Wave", Code = "repeat 360 [ fd 2 lt sin repcount ]" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("logoInterop.initializeLogo");
                if (commandInputRef != null)
                {
                    await commandInputRef.FocusAsync();
                }
            }
            catch (Exception ex)
            {
                outputLines.Add(new OutputLine { Text = $"Initialization error: {ex.Message}", IsError = true });
                StateHasChanged();
            }
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ExecuteCommand();
        }
        else if (e.Key == "ArrowUp" && commandHistory.Any())
        {
            currentInput = commandHistory.LastOrDefault() ?? "";
            StateHasChanged();
        }
    }

    private async Task ExecuteCommand()
    {
        await ExecuteCommandInternal(currentInput);
        currentInput = "";
        if (commandInputRef != null)
        {
            await commandInputRef.FocusAsync();
        }
    }

    private async Task ExecuteMultiLineCommand()
    {
        await ExecuteCommandInternal(multiLineInput);
        multiLineInput = "";
    }

    private async Task ExecuteCommandInternal(string command)
    {
        if (string.IsNullOrWhiteSpace(command))
            return;

        // Add to history
        if (!commandHistory.Contains(command))
        {
            commandHistory.Add(command);
            if (commandHistory.Count > 100)
            {
                commandHistory.RemoveAt(0);
            }
        }

        try
        {
            var result = await JSRuntime.InvokeAsync<string>("logoInterop.executeCommand", command);
            
            if (!string.IsNullOrWhiteSpace(result))
            {
                outputLines.Add(new OutputLine { Text = result, IsError = false });
            }
            
            outputLines.Add(new OutputLine { Text = $"✓ Executed: {command}", IsError = false });
        }
        catch (Exception ex)
        {
            outputLines.Add(new OutputLine { Text = $"✗ Error: {ex.Message}", IsError = true });
        }

        StateHasChanged();
    }

    private async Task ClearScreen()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("logoInterop.clearCanvas");
            outputLines.Add(new OutputLine { Text = "✓ Canvas cleared", IsError = false });
        }
        catch (Exception ex)
        {
            outputLines.Add(new OutputLine { Text = $"✗ Clear error: {ex.Message}", IsError = true });
        }
        StateHasChanged();
    }

    private void ClearOutput()
    {
        outputLines.Clear();
        StateHasChanged();
    }

    private void LoadCommand(string command)
    {
        currentInput = command;
        StateHasChanged();
    }

    private void LoadExample(string example)
    {
        if (example.Contains('\n'))
        {
            multiLineInput = example;
        }
        else
        {
            currentInput = example;
        }
        StateHasChanged();
    }

    private void ClearHistory()
    {
        commandHistory.Clear();
        StateHasChanged();
    }

    private async Task HandleToolbarCommand(string command)
    {
        currentInput = command;
        await ExecuteCommand();
    }

    public async ValueTask DisposeAsync()
    {
        if (logoModule != null)
        {
            await logoModule.DisposeAsync();
        }
    }
}
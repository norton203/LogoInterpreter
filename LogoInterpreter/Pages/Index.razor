@page "/"
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Logo Interpreter</PageTitle>

<div class="single">
    <div id="topbar" class="panel">
        <h1>Logo Interpreter</h1>
        <p id="topbar-links">
            <a href="#" @onclick="ShowTests" @onclick:preventDefault="true">Tests</a>
            | <a href="https://github.com/inexorabletash/jslogo" target="_blank">Source</a>
            | <a href="#" @onclick="ShowLanguageReference" @onclick:preventDefault="true">Language Reference</a>
        </p>
    </div>

    <div id="content-container">
        <div id="display" class="panel">
            <div id="overlay"></div>
            <canvas id="sandbox" width="500" height="350"></canvas>

            <div id="input" class="panel">
                <div class="single-line">
                    <textarea @ref="inputElement" @bind="currentInput" @onkeydown="HandleKeyDown" placeholder="Type Logo commands here..."></textarea>
                    <button @onclick="ExecuteCommand" class="btn btn-primary">Run</button>
                    <button @onclick="ClearScreen" class="btn btn-secondary">Clear</button>
                </div>

                @if (isMultiLine)
                {
                    <div class="multi-line">
                        <textarea @ref="multiLineElement" @bind="multiLineInput" rows="10" cols="60"></textarea>
                        <div class="button-group">
                            <button @onclick="ExecuteMultiLine" class="btn btn-primary">Run All</button>
                            <button @onclick="ToggleSingleLine" class="btn btn-secondary">Single Line</button>
                        </div>
                    </div>
                }
                else
                {
                    <button @onclick="ToggleMultiLine" class="btn btn-outline-secondary btn-sm">Multi-line</button>
                }
            </div>

            <div id="output" class="panel">
                @foreach (var line in outputLines)
                {
                    <div class="output-line @(line.IsError ? "error" : "")">@line.Text</div>
                }
            </div>
        </div>

        <div id="sidebar-container">
            <div id="sidebar-buttons" class="panel">
                <ul>
                    <li>
                        <a href="#" @onclick="() => ShowSidebarContent(SidebarContent.Reference)" @onclick:preventDefault="true"
                           class="@(currentSidebar == SidebarContent.Reference ? "active" : "")">Reference</a>
                    </li>
                    <li>
                        <a href="#" @onclick="() => ShowSidebarContent(SidebarContent.Library)" @onclick:preventDefault="true"
                           class="@(currentSidebar == SidebarContent.Library ? "active" : "")">Library</a>
                    </li>
                    <li>
                        <a href="#" @onclick="() => ShowSidebarContent(SidebarContent.History)" @onclick:preventDefault="true"
                           class="@(currentSidebar == SidebarContent.History ? "active" : "")">History</a>
                    </li>
                    <li>
                        <a href="#" @onclick="() => ShowSidebarContent(SidebarContent.Examples)" @onclick:preventDefault="true"
                           class="@(currentSidebar == SidebarContent.Examples ? "active" : "")">Examples</a>
                    </li>
                    <li>
                        <a href="#" @onclick="() => ShowSidebarContent(SidebarContent.Links)" @onclick:preventDefault="true"
                           class="@(currentSidebar == SidebarContent.Links ? "active" : "")">Links</a>
                    </li>
                </ul>
            </div>

            <div id="sidebar" class="panel">
                @switch (currentSidebar)
                {
                    case SidebarContent.Reference:
                        <div class="sidebar-content">
                            <h3>Logo Language Reference</h3>
                            <div class="reference-content">
                                <h4>Movement Commands</h4>
                                <ul>
                                    <li><strong>fd/forward [distance]</strong> - Move turtle forward</li>
                                    <li><strong>bk/backward [distance]</strong> - Move turtle backward</li>
                                    <li><strong>rt/right [angle]</strong> - Turn turtle right</li>
                                    <li><strong>lt/left [angle]</strong> - Turn turtle left</li>
                                </ul>

                                <h4>Pen Commands</h4>
                                <ul>
                                    <li><strong>pu/penup</strong> - Lift pen (don't draw)</li>
                                    <li><strong>pd/pendown</strong> - Put pen down (draw)</li>
                                    <li><strong>setcolor [color]</strong> - Set pen color</li>
                                    <li><strong>setpensize [size]</strong> - Set pen width</li>
                                </ul>

                                <h4>Control Commands</h4>
                                <ul>
                                    <li><strong>repeat [count] [commands]</strong> - Repeat commands</li>
                                    <li><strong>home</strong> - Return to center</li>
                                    <li><strong>clean</strong> - Clear canvas</li>
                                    <li><strong>clearscreen/cs</strong> - Clear and home</li>
                                </ul>

                                <h4>Colors</h4>
                                <p>red, green, blue, yellow, orange, purple, black, white, gray</p>
                            </div>
                        </div>
                        break;

                    case SidebarContent.Library:
                        <div class="sidebar-content">
                            <div class="sidebar-header">
                                <button @onclick="ClearLibrary" class="btn btn-sm btn-outline-danger">Clear Library</button>
                            </div>
                            <div class="snippets">
                                @foreach (var procedure in libraryProcedures)
                                {
                                    <div class="snippet" @onclick="() => LoadProcedure(procedure)">
                                        <pre>@procedure</pre>
                                    </div>
                                }
                                @if (!libraryProcedures.Any())
                                {
                                    <div class="placeholder">Defined procedures will appear here.</div>
                                }
                            </div>
                        </div>
                        break;

                    case SidebarContent.History:
                        <div class="sidebar-content">
                            <div class="sidebar-header">
                                <button @onclick="ClearHistory" class="btn btn-sm btn-outline-danger">Clear History</button>
                            </div>
                            <div class="snippets">
                                @foreach (var command in commandHistory)
                                {
                                    <div class="snippet" @onclick="() => LoadCommand(command)">
                                        <pre>@command</pre>
                                    </div>
                                }
                                @if (!commandHistory.Any())
                                {
                                    <div class="placeholder">Commands you enter will appear here so you can find, modify, and re-run them.</div>
                                }
                            </div>
                        </div>
                        break;

                    case SidebarContent.Examples:
                        <div class="sidebar-content">
                            <div class="snippets">
                                @foreach (var example in logoExamples)
                                {
                                    <div class="snippet" @onclick="() => LoadExample(example.Code)">
                                        <h4>@example.Title</h4>
                                        <pre>@example.Code</pre>
                                    </div>
                                }
                            </div>
                        </div>
                        break;

                    case SidebarContent.Links:
                        <div class="sidebar-content">
                            <ul class="links-list">
                                <li><a href="https://en.wikipedia.org/wiki/Logo_(programming_language)" target="_blank">Logo</a> according to Wikipedia</li>
                                <li><a href="https://utdallas.edu/~veerasam/logo/" target="_blank">UT Dallas LOGO Workshop</a> - fun examples to try</li>
                                <li><a href="http://el.media.mit.edu/logo-foundation/" target="_blank">The Logo Foundation</a> with links to learning resources</li>
                                <li><a href="https://www.cs.berkeley.edu/~bh/logo.html" target="_blank">Berkeley Logo (UCBLogo)</a> is a well respected interpreter</li>
                            </ul>
                        </div>
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {
    private ElementReference inputElement;
    private ElementReference multiLineElement;
    private string currentInput = "";
    private string multiLineInput = "";
    private bool isMultiLine = false;
    private List<OutputLine> outputLines = new();
    private List<string> commandHistory = new();
    private List<string> libraryProcedures = new();
    private SidebarContent currentSidebar = SidebarContent.Examples;

    private IJSObjectReference? logoModule;

    private enum SidebarContent
    {
        Reference,
        Library,
        History,
        Examples,
        Links
    }

    private class OutputLine
    {
        public string Text { get; set; } = "";
        public bool IsError { get; set; } = false;
    }

    private class LogoExample
    {
        public string Title { get; set; } = "";
        public string Code { get; set; } = "";
    }

    private List<LogoExample> logoExamples = new()
    {
        new() { Title = "Simple Square", Code = "repeat 4 [ fd 100 rt 90 ]" },
        new() { Title = "Colorful Star", Code = "setcolor red\nrepeat 5 [ fd 100 rt 144 ]" },
        new() { Title = "Square Pattern", Code = "repeat 36 [ fd 50 rt 10 ]" },
        new() { Title = "Spiral", Code = "repeat 100 [ fd repcount rt 91 ]" },
        new() { Title = "Flower Pattern", Code = "setcolor blue\nrepeat 36 [ fd 50 rt 170 ]" },
        new() { Title = "Octagon", Code = "repeat 8 [ fd 60 rt 45 ]" },
        new() { Title = "Triangle", Code = "repeat 3 [ fd 100 rt 120 ]" },
        new() { Title = "Circle Pattern", Code = "repeat 72 [ fd 5 rt 5 ]" }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("logoInterop.initializeLogo");
                await inputElement.FocusAsync();
            }
            catch (Exception ex)
            {
                outputLines.Add(new OutputLine { Text = $"Initialization error: {ex.Message}", IsError = true });
                StateHasChanged();
            }
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !isMultiLine)
        {
            await ExecuteCommand();
        }
    }

    private async Task ExecuteCommand()
    {
        var command = currentInput.Trim();
        if (string.IsNullOrEmpty(command)) return;

        commandHistory.Insert(0, command);
        if (commandHistory.Count > 100)
        {
            commandHistory.RemoveAt(commandHistory.Count - 1);
        }

        try
        {
            var result = await JSRuntime.InvokeAsync<string>("logoInterop.executeCommand", command);
            if (!string.IsNullOrEmpty(result))
            {
                outputLines.Add(new OutputLine { Text = result });
            }
        }
        catch (Exception ex)
        {
            outputLines.Add(new OutputLine { Text = ex.Message, IsError = true });
        }

        currentInput = "";
        StateHasChanged();

        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "output");
        }
        catch
        {
            // Ignore scrolling errors
        }
    }

    private async Task ExecuteMultiLine()
    {
        var commands = multiLineInput.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        foreach (var command in commands)
        {
            currentInput = command.Trim();
            if (!string.IsNullOrEmpty(currentInput))
            {
                await ExecuteCommand();
            }
        }
        multiLineInput = "";
    }

    private void ToggleMultiLine()
    {
        isMultiLine = true;
        StateHasChanged();
    }

    private void ToggleSingleLine()
    {
        isMultiLine = false;
        StateHasChanged();
    }

    private async Task ClearScreen()
    {
        outputLines.Clear();
        try
        {
            await JSRuntime.InvokeVoidAsync("logoInterop.clearCanvas");
        }
        catch (Exception ex)
        {
            outputLines.Add(new OutputLine { Text = $"Clear error: {ex.Message}", IsError = true });
        }
        StateHasChanged();
    }

    private void ShowSidebarContent(SidebarContent content)
    {
        currentSidebar = content;
        StateHasChanged();
    }

    private void LoadCommand(string command)
    {
        currentInput = command;
        StateHasChanged();
    }

    private void LoadProcedure(string procedure)
    {
        if (isMultiLine)
        {
            multiLineInput = procedure;
        }
        else
        {
            ToggleMultiLine();
            multiLineInput = procedure;
        }
        StateHasChanged();
    }

    private void LoadExample(string example)
    {
        if (isMultiLine)
        {
            multiLineInput = example;
        }
        else
        {
            ToggleMultiLine();
            multiLineInput = example;
        }
        StateHasChanged();
    }

    private void ClearHistory()
    {
        commandHistory.Clear();
        StateHasChanged();
    }

    private void ClearLibrary()
    {
        libraryProcedures.Clear();
        StateHasChanged();
    }

    private void ShowTests()
    {
        outputLines.Add(new OutputLine { Text = "Tests functionality not implemented yet." });
        StateHasChanged();
    }

    private void ShowLanguageReference()
    {
        currentSidebar = SidebarContent.Reference;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (logoModule != null)
        {
            await logoModule.DisposeAsync();
        }
    }
}